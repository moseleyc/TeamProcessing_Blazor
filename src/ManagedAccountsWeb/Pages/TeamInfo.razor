@page "/teaminfo"

@using ManagedAccountClasses.TeamSite
@using ManagedAccountsWeb.Services
@inject ISpecialInstructionService InstructionService
@inject AuthenticationStateProvider  AuthenticationStateProvider

<h1>Team Data</h1>

@if (specialInstructions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Account Number</th>
                <th>Notes</th>
                <th>Entered By</th>
                <th>Entered Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inst in specialInstructions)
            {
                <tr>
                    <td>@inst.Id</td>
                    <td>
                        <input type="text" class="form-control" @bind="@inst.AccountNumber" />
                    </td>
                    <td>
                        <input type="text" class="form-control" @bind="@inst.Notes" />
                    </td>
                    <td>@inst.EnteredBy"</td>
                    <td>@inst.EnteredDate.ToShortDateString()</td>
                    <td>
                        <button type="button" title="Edit" onclick="EditSpecialInstructions(@inst.Id)">Edit</button>
                    </td>
                </tr>
            }
        <tr>
            <td></td>
            <td>
                <input type="text" class="form-control" @bind="@NewSpecialInstruction.AccountNumber"/>
            </td>
            <td>
                <input type="text" class="form-control" @bind="@NewSpecialInstruction.Notes"/>
            </td>
            <td></td>
            <td></td>
        </tr>
            <tr>
                <td><button title="Add" @onclick="AddRow">Add</button>
                    </td>
            </tr>
        </tbody>
    </table>
}

@code
{
    private List<SpecialInstruction> specialInstructions;
    protected SpecialInstruction NewSpecialInstruction = new SpecialInstruction();

    protected async override Task OnInitializedAsync()
    {
        specialInstructions = await InstructionService.GetAllSpecialInstructionsAsync();
    }

    protected async void AddRow()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        string userName = "Unknown";
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
        }

        NewSpecialInstruction.EnteredBy = userName;
        NewSpecialInstruction.EnteredDate = DateTime.Now;

        var isSuccessful = InstructionService.AddSpecialInstruction(NewSpecialInstruction);
        if (isSuccessful)
        {
            await RefreshState();
        }
    }

    protected async void EditSpecialInstructions(int id)
    {
        InstructionService.EditSpecialInstruction(specialInstructions.FirstOrDefault(x => x.Id == id));

        await RefreshState();
    }

    private async Task RefreshState()
    {
        specialInstructions = await InstructionService.GetAllSpecialInstructionsAsync();
        NewSpecialInstruction = new SpecialInstruction();
        base.StateHasChanged();
    }
}