@page "/teaminfo"

@using ManagedAccountClasses.TeamSite
@using ManagedAccountsWeb.Services
@inject ISpecialInstructionService InstructionService
@inject AuthenticationStateProvider  AuthenticationStateProvider

<h1>Team Data</h1>

@if (specialInstructions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Account Number</th>
                <th>Notes</th>
                <th>Entered By</th>
                <th>Entered Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inst in specialInstructions)
            {
                <tr>
                    <td>@inst.Id</td>
                    <td>@inst.AccountNumber</td>
                    <td>@inst.Notes</td>
                    <td>@inst.EnteredBy</td>
                    <td>@inst.EnteredDate.ToShortDateString()</td>
                </tr>
            }
            <tr>
                <td><button title="Add" @onclick="AddEmptyRow">Add</button></td>
            </tr>
        </tbody>
    </table>
}

@code
{
    private List<SpecialInstruction> specialInstructions;

    protected override async Task OnInitializedAsync()
    {
        specialInstructions = await InstructionService.GetSpecialInstructionAsync();
    }

    protected async void AddEmptyRow()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        string userName = "Unknown";
        if(authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
        }

        var specialInstruction = new SpecialInstruction
        {
            AccountNumber = "T00003A2",
            Notes = $"This was added {DateTime.Now:hhmmss}",
            EnteredBy = userName,
            EnteredDate = DateTime.Now
        };

        var isSuccessful = await InstructionService.AddSpecialInstructionAsync(specialInstruction);
        if (isSuccessful)
        {
            specialInstructions = await InstructionService.GetSpecialInstructionAsync();
            base.StateHasChanged();
        }
        //specialInstructions.Add(new SpecialInstruction { EnteredBy = userName, EnteredDate = DateTime.Now });
    }
}